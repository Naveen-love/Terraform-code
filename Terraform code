provider "aws" {
  region = "us-east-1"
}

# Create a VPC
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
}

# Create an S3 bucket for media storage
resource "aws_s3_bucket" "media_storage" {
  bucket = "media-streaming-app-bucket"
  acl    = "public-read"
}

# Create a DynamoDB table
resource "aws_dynamodb_table" "user_data" {
  name         = "UserD
 hash_key     = "UserId"
  billing_mode = "PAY_PER_REQUEST"

  attribute {
    name = "UserId"
    type = "S"
  }
}

# Create an RDS Aurora Serverless cluster
resource "aws_rds_cluster" "aurora" {
  cluster_identifier      = "aurora-cluster"
  engine                  = "aurora"
  engine_mode             = "serverless"
  master_username         = "admin"
  master_password         = "password"
  skip_final_snapshot     = true
  scaling_configuration {
    auto_pause   = true
    min_capacity = 1
    max_capacity = 2
  }
}

# Create an API Gateway
resource "aws_api_gateway_rest_api" "api" {
  name        = "media-streaming-api"
  description = "API Gateway for media streaming"
}

# Create a Lambda function
resource "aws_iam_role" "lambda_exec" {
  name = "lambda_exec_role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "lambda_policy" {
  role       = aws_iam_role.lambda_exec.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# CloudFront Distribution for S3
resource "aws_cloudfront_distribution" "s3_distribution" {
  origin {
    domain_name = aws_s3_bucket.media_storage.bucket_regional_domain_name
    origin_id   = "S3-media-storage"
  }
  
  enabled             = true
  is_ipv6_enabled     = true
  default_root_object = "index.html"
}

# Cognito User Pool for Authentication
resource "aws_cognito_user_pool" "user_pool" {
  name = "media-streaming-user-pool"
}
